/* Original by Jim Loos. Modified by smbaker for H8 project */

Name io;
Partno G22V10#2;
Revision;
Date 09/1/2023;
Designer Jim Loos;
Company ;
Location ;
Assembly 8008 SBC;
Device G22V10;

/* Inputs: */
Pin 1  = !IORD;
Pin 2  = !IOWR;
Pin 3  = A9;
Pin 4  = A10;
Pin 5  = A11;
Pin 6  = A12;
Pin 7  = A13;
Pin 8  = !RESET;
Pin 9  = DBD;
Pin 10 = !ROMCS_IN;
Pin 11 = NC2;
Pin 13 = NC3;

/* Outputs:  */
Pin 23 = !H8IOW;
Pin 22 = !INPMUX;
Pin 21 = !OUTMUX;
Pin 20 = !OUTMMAP;
Pin 19 = START;
Pin 18 = !OUTIOMMMUX;
Pin 17 = !ROMCS_OUT;
Pin 16 = !RAMCS;
Pin 15 = !H8OUT;
Pin 14 = !H8IOR;

/* Input/Output logic: */
in0  = !A13 & !A12;
out0 = !A13 &  A12;
out1 =  A13 & !A12;
out2 =  A13 &  A12;

device0 = !A11 & !A10 & !A9;
device1 = !A11 & !A10 &  A9;
device2 = !A11 &  A10 & !A9;
device3 = !A11 &  A10 &  A9;
device4 =  A11 & !A10 & !A9;
device5 =  A11 & !A10 &  A9;
device6 =  A11 &  A10 & !A9;
device7 =  A11 &  A10 &  A9;

INPMUX = in0 & (device0 # device1) & IORD;           /* Input ports 0-1            */
OUTMUX = out0 & IOWR;                                /* Output ports 8-15 (group0) */
OUTMMAP = out0 & 
          (device4 # device5 # device6 # device7) &
          IOWR;                                      /* these overlap with outmux ports 4-7 */
OUTIOMMMUX = out2 & IOWR;                            /* all of Output ports 24-31 (group 2) go here */

H8IOR = in0 & (!device0) & (!device1) & IORD;        /* IORD to H8 bus: all ports except 0 and 1 */
H8IOW = out1 & IOWR;                                 /* IOW to H8 bus: ports 16-23 (group 1) */

H8OUT = !IORD;                                       /* H8 direction - always OUT unless we're doing IORD */

/* simulated SR flip-flop made up of cross-connected NAND gates.
 * the flip-flop is set when the reset signal from the DS1233 goes low
 * (power-on-reset) and cleared when input ports 0 or 1 are accessed.
 * when set, the flip-flop forces all memory accesses to select the 
 * EPROM. when reset, the flip-flop permits the normal memory map.
 *
 * This is also used to enable the bank switcher if it is present. If
 * START is high, the bank switcher is disabled and ROM 0x0000-0x0FFF
 * will be present in all four banks. If START is low, then the bank
 * switcher will select ROM or RAM is appropriate. Do NOT enable the
 * bank switcher until you've set the bank registers.
 */

START = RESET # (START & !INPMUX);

/* Memory   */
ROMCS_OUT =  A13 #  START;  /* 2000-3FFFH. In case memory mapper is not used  */
RAMCS = !ROMCS_IN;          /* allow the memory mapper to determine ROM/RAM   */
