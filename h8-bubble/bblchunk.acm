*	CHUNKED READ AND WRITE ROUTINES

BBLCSZ  EQU	020H		* Chunk size times 256

**	NEXT CHUNK
*
*	ADJUST DE, HL, AND BAR TO POINT TO NEXT CHUNK

NEXTCNK	MOV	A,D		* Increment DE by one chunk
	ADI	BBLCSZ
	MOV	D,A

	MOV	A,H		* Decrement HL by one chunk
	SUI	BBLCSZ
	MOV	H,A

	LDA	BARL		* Increment BAR by the chunk size
	ADI	BBLCSZ*4
	STA	BARL
	RNC
	LDA	BARH
	INR	A
	STA	BARH
	RET

**	READ DATA
*
*	BC = BYTE COUNT
*	DE = SRC ADDRESS
*	BARL/BARH = BUBBLE BLOCK
*
*	RETURNS STATUS CODE IN A. 40 or 42 ARE GOOD
*
*	MODIFIES BARL/BARH

BREADC  EQU	*
	PUSH	B		* Save caller args
	PUSH	D
	PUSH	H
	MOV	H,B		* BC INTO HL		
	MOV	L,C

RNEXT16	MOV     A,H
	CPI	BBLCSZ+1	* Bigger than a chunk?
	JC	LASTRD		* Nope.
	PUSH	D
	PUSH	H
	MVI	H,BBLCSZ	* Set size to 1 chunk
	MVI	L,0
	CALL	BBLREAD		* Read the chunk
	POP	H
	POP	D

	CPI	040H		* 40 is success
	JZ	BRDCGD
	CPI	042H		* 42 is success with parity error
	JZ	BRDCGD
	JMP	BRDCOUT		* Not an allowed answer

BRDCGD	CALL	NEXTCNK		* Point to next Chunk
	JMP	RNEXT16		* Keep on workin

LASTRD	CALL	BBLREAD		* We are almost done, less than 16K+1sector remaining
BRDCOUT	POP	H
	POP	D
	POP	B
	RET

**	WRITE DATA
*
*	BC = BYTE COUNT
*	DE = SRC ADDRESS
*	BARL/BARH = BUBBLE BLOCK
*
*	RETURNS STATUS CODE IN A. 40 or 42 ARE GOOD
*
*	MODIFIES BARL/BARH

BWRITEC	EQU     *
	PUSH	B		* Save caller args
	PUSH	D
	PUSH	H
	MOV	H,B		* BC INTO HL		
	MOV	L,C

WNEXT16	MOV     A,H
	CPI	BBLCSZ+1	* Bigger thank a chunk?
	JC	LASTWR		* Nope.
	PUSH	D
	PUSH	H
	MVI	H,BBLCSZ	* Set size to 1 chunk
	MVI	L,0
	CALL	BBLWRIT		* Write the chunk
	POP	H
	POP	D

	CPI	040H		* 40 is success
	JZ	BWRCGD
	CPI	042H		* 42 is success with parity error
	JZ	BWRCGD
	JMP     BWRCOUT		* Not an allowed answer

BWRCGD	CALL	NEXTCNK		* Point to next Chunk
	JMP	WNEXT16		* Keep on workin

LASTWR	CALL	BBLWRIT		* We are almost done, less than 16K+1sector remaining
BWRCOUT	POP	H
	POP	D
	POP	B
	RET

